plugins {
    id("java")
    id("java-library")
    id("signing")

    id("com.github.johnrengelman.shadow").version("8.1.1")
}

apply(plugin: "dev.architectury.loom")
apply(plugin: "com.replaymod.preprocess")

String modPlatform = loom.platform.get().toString().toLowerCase()
boolean fabricLike = modPlatform == "fabric" || modPlatform == "quilt"
boolean forgeLike = modPlatform == "forge" || modPlatform == "neoforge"
String modId = fabricLike ? project.parent.property("mod.id") : (project.parent.property("mod.id") as String).replace("-", "_")
int mcVersion = 0
evaluationDependsOn(":magiclib-minecraft-api:common")

preprocess {
    mcVersion = vars.get().get("MC")
    vars.put("FABRIC", modPlatform == "fabric" ? 1 : 0)
    vars.put("FORGE", modPlatform == "forge" ? 1 : 0)
    vars.put("NEO_FORGE", modPlatform == "neoforge" ? 1 : 0)
    vars.put("FABRIC_LIKE", fabricLike ? 1 : 0)
    vars.put("FORGE_LIKE", forgeLike ? 1 : 0)
}

repositories {
    maven {
        name("NeoForge")
        url("https://maven.neoforged.net/releases/")
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.property("dependencies.minecraft_version")}")
    mappings(loom.officialMojangMappings())
    modApi("net.fabricmc:fabric-loader:${project.property("dependencies.fabric_loader_version")}")

    // Make IDE happy.
    api(project(":magiclib-core:common"))
    api(project(path: ":magiclib-core:${modPlatform}", configuration: "shadow"))

    if (modPlatform == "forge") {
        forge("net.minecraftforge:forge:${project.property("dependencies.minecraft_version")}-${project.property("dependencies.forge_version")}")
    } else if (modPlatform == "neoforge") {
        neoForge("net.neoforged:neoforge:${project.property("dependencies.neoforge_version")}")
    }
}

loom {
    silentMojangMappingsLicense()

    runConfigs.configureEach {
        // Dump modified classes automatically.
        property("mixin.debug.export", "true")
    }

    runConfigs.named("client") {
        programArgs([
                "--width",
                "1920",
                "--height",
                "1080",
        ])
        runDir("run/client")
    }

    runConfigs.named("server") {
        runDir("run/server")
    }

    runs {
        mixinAuditClient {
            inherit(client)
            vmArgs("-Dmagiclib.mixin_audit=true")
            ideConfigGenerated(false)
            runDir("run/client")
        }

        mixinAuditServer {
            inherit(server)
            vmArgs("-Dmagiclib.mixin_audit=true")
            ideConfigGenerated(false)
            runDir("run/server")
        }
    }
}

base {
    setArchivesName("${project.parent.property("mod.archives_base_name")}-mc${project.property("dependencies.minecraft_version")}")
    group("${project.property("mod.maven_group")}")
    version(project.getModVersion(project.parent))
}

java {
    if (forgeLike) {
        if (mcVersion > 11701) {
            sourceCompatibility(JavaVersion.VERSION_17)
            targetCompatibility(JavaVersion.VERSION_17)
        } else if (mcVersion > 11605) {
            sourceCompatibility(JavaVersion.VERSION_16)
            targetCompatibility(JavaVersion.VERSION_16)
        } else {
            sourceCompatibility(JavaVersion.VERSION_1_8)
            targetCompatibility(JavaVersion.VERSION_1_8)
        }
    } else {
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
    }

    withSourcesJar()
    withJavadocJar()
}

processResources {
    [
            "fabric.mod.json"   : ["fabric"],
            "META-INF"          : ["forge", "neoforge"],
            "META-INF/mods.toml": ["forge", "neoforge"]
    ].forEach { file, platforms ->
        if (platforms.contains(modPlatform)) {
            filesMatching(file) {
                expand([
                        "mod_description": project.parent.property("mod.description"),
                        "mod_homepage"   : project.parent.property("mod.homepage"),
                        "mod_id"         : modId,
                        "mod_license"    : project.parent.property("mod.license"),
                        "mod_name"       : project.parent.property("mod.name"),
                        "mod_sources"    : project.parent.property("mod.sources"),
                        "mod_version"    : project.version
                ])
            }
        } else {
            exclude(file)
        }
    }

    from("${rootDir}/LICENSE")
    from("${rootDir}/icon.png") {
        if (fabricLike) {
            into("assets/${project.parent.property("mod.id")}")
        }
    }
}

tasks.withType(Javadoc).configureEach { Javadoc task ->
    include("**/api/**")
    task.options.encoding("UTF-8")
    (task.options as CoreJavadocOptions).addStringOption("Xdoclint:none", "-quiet")
}

tasks.withType(JavaCompile).configureEach { JavaCompile task ->
    task.options.encoding("UTF-8")
    if (forgeLike) {
        if (mcVersion > 11701) {
            task.options.release.set(17)
        } else if (mcVersion > 11605) {
            task.options.release.set(16)
        } else {
            task.options.release.set(8)
        }
    } else {
        task.options.release.set(8)
    }
}
