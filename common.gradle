apply(plugin: "maven-publish")
apply(plugin: "fabric-loom")
apply(plugin: "io.github.juuxel.loom-quiltflower")
apply(plugin: "com.replaymod.preprocess")

int mcVersion = 1

preprocess {
    mcVersion = vars.get()["MC"]
    tabIndentation = false
}

repositories {
    maven {
        url("https://www.cursemaven.com")
    }
    maven {
        url("https://api.modrinth.com/maven")
    }
    maven {
        url("https://maven.hendrixshen.top")
    }
    mavenCentral()
    mavenLocal()
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())

    modCompileOnly("org.projectlombok:lombok:${project.lombok_version}")
    annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")
    testCompileOnly("org.projectlombok:lombok:${project.lombok_version}")
    testAnnotationProcessor("org.projectlombok:lombok:${project.lombok_version}")

    modApi("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modApi("net.fabricmc:fabric-loader:${project.fabric_loader_version}")

    modApi("curse.maven:carpet-349239:${project.carpet_version}")
    modApi("curse.maven:malilib-303119:${project.malilib_version}")
    modApi("curse.maven:modmenu-308702:${project.modmenu_version}")

    if (mcVersion <= 11502) {
        modRuntimeOnly("curse.maven:auto-config-updated-api-373261:${project.auto_config_updated_api_version}")
        modRuntimeOnly("curse.maven:cloth-config-348521:${project.cloth_config_version}")
    }
    modRuntimeOnly("curse.maven:in-game-account-switcher-232676:${project.inGameAccountSwitcher_version}")
    modRuntimeOnly("curse.maven:lazydfu-433518:${project.lazydfu_version}")
    modRuntimeOnly("curse.maven:imblockerfabric-399225:${project.imblockerfabric_version}")
    modRuntimeOnly("curse.maven:smooth-boot-415758:${project.smoothboot_version}")

    testmodImplementation(sourceSets.main.output)

    runtimeOnly(project(path: ":fabricWrapper"))
}

loom {
    interfaceInjection {
        enableDependencyInterfaceInjection = true
    }

    runs {
        testmodClient {
            client()
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            name = "Testmod Server"
            source sourceSets.testmod
        }

        autoTestServer {
            inherit testmodServer
            name "Auto Test Server"
            vmArg "-D${project.mod_id}.autoTest"
        }

        gametest {
            inherit testmodServer
            name "Game Test"

            // Enable the gametest runner
            vmArg "-D${project.mod_id}.gametest"
            vmArg "-D${project.mod_id}.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "run/gametest"
        }
    }

    runConfigs.all {
        // Dump modified classes automatically.
        property("mixin.debug.export", "true")
    }

    runConfigs.client {
        programArgs([
                "--width",
                "1920",
                "--height",
                "1080",
        ])
        runDir("run/client")
    }

    runConfigs.server {
        runDir("run/server")
    }

    runClient {
        defaultCharacterEncoding("UTF-8")
        if (!new File("${projectDir}/run/client/options.txt").exists()) {
            new File("${projectDir}/run/client").mkdirs()
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("${projectDir}/run/client/options.txt"))
            bufferedWriter.write("autoJump:false\n")
            bufferedWriter.write("enableVsync:false\n")
            bufferedWriter.write("forceUnicodeFont:true\n")
            bufferedWriter.write("fov:1.0\n")
            bufferedWriter.write("gamma:16.0\n")
            bufferedWriter.write("guiScale:2\n")
            bufferedWriter.write("lang:zh_CN\n")
            bufferedWriter.write("maxFps:260\n")
            bufferedWriter.write("renderDistance:10\n")
            bufferedWriter.write("soundCategory_master:0.0")
            bufferedWriter.close()
        }
    }

    runServer {
        defaultCharacterEncoding("UTF-8")
        // Auto agree EULA
        if (!new File("${projectDir}/run/server/eula.txt").exists()) {
            new File("${projectDir}/run/server").mkdirs()
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("${projectDir}/run/server/eula.txt"))
            bufferedWriter.write("eula=true")
            bufferedWriter.close()
        }
    }
}

// test.dependsOn runGametest

remapJar {
    remapperIsolation = true
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name + "-" + project.minecraft_version
version = project.parent.version
group = project.maven_group

processResources {
    filesMatching("fabric.mod.json") {
        expand(["mod_version"         : project.version,
                "mod_id"              : project.mod_id,
                "mod_name"            : project.mod_name,
                "mod_homepage"        : project.mod_homepage,
                "mod_sources"         : project.mod_sources,
                "mod_license"         : project.mod_license,
                "minecraft_dependency": project.minecraft_dependency,
                "minecraft_version_id": project.minecraft_version.replace(".", "_"),
                "minecraft_version"   : project.minecraft_version
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.compilerArgs += '-Xlint:-removal'
}

java {
    withSourcesJar()
}

jar {
    from("../../LICENSE")
}

import groovy.util.Node

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project.mod_id}-${project.minecraft_version.replace(".", "_")}"
            version = project.version
            from(components.java)
        }
    }

    repositories {
        mavenLocal()
        maven {
            url("$rootDir/publish")
        }
    }
}