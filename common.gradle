apply(plugin: "maven-publish")
apply(plugin: "fabric-loom")
apply(plugin: "io.github.juuxel.loom-quiltflower")
apply(plugin: "net.kyori.blossom")
apply(plugin: "com.replaymod.preprocess")

repositories {
    mavenLocal()

    maven {
        name("Curse Maven")
        url("https://www.cursemaven.com")
    }

    maven {
        name("FabricMC Maven")
        url("https://maven.fabricmc.net")
    }

    maven {
        name("Nyan Maven")
        url("https://maven.hendrixshen.top")
    }

    mavenCentral()
}

int mcVersion = 1

preprocess {
    mcVersion = vars.get().get("MC")
    tabIndentation.set(false)
    patternAnnotation.set("top.hendrixshen.magiclib.compat.preprocess.api.annotation.Preprocess")
}

// Module, Property prefix, Resolve condition, Transitive dependencies.
def apiDependencies = [
        ["net.fabricmc.fabric-api:fabric-api", "fabric" , true              , true],
        ["curse.maven:carpet-349239"         , "carpet" , true              , false],
        ["curse.maven:malilib-303119"        , "malilib", mcVersion <= 11903, false],
        // Temp, from Nyan Maven
        ["fi.dy.masa:malilib"                , "malilib", mcVersion > 11903 , false],
        ["curse.maven:modmenu-308702"        , "modmenu", true              , false]
]

// Module, Property prefix, Resolve condition, Transitive dependencies.
def runtimeDependencies = [
        ["curse.maven:auto-config-updated-api-373261" , "auto_config_updated_api", mcVersion <= 11502, false],
        ["curse.maven:cloth-config-348521"            , "cloth_config"           , mcVersion <= 11502, false],
        ["curse.maven:in-game-account-switcher-232676", "inGameAccountSwitcher"  , mcVersion <= 11903, false],
        ["curse.maven:lazydfu-433518"                 , "lazydfu"                , true              , false],
        ["curse.maven:imblockerfabric-399225"         , "imblockerfabric"        , true              , false],
        ["curse.maven:smooth-boot-415758"             , "smoothboot"             , true              , false]
]

dependencies {
    // Development environment
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())
    modApi("net.fabricmc:fabric-loader:${project.fabric_loader_version}")

    // Annotation processor
    modApi("org.projectlombok:lombok:${project.lombok_version}")
    annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")

    // API
    apiDependencies.forEach {item ->
        String dependencyNotation = item[0]
        String propertyPrefix = item[1]
        boolean shouldResolve = item[2]
        boolean shouldTransitive = item[3]

        if (shouldResolve) {
            modApi("${dependencyNotation}:${project.property("${propertyPrefix}_version")}") {
                transitive(shouldTransitive)
            }
        }
    }

    // Runtime Library - Make development environment comfortable.
    runtimeDependencies.forEach {item ->
        String dependencyNotation = item[0]
        String propertyPrefix = item[1]
        boolean shouldResolve = item[2]
        boolean shouldTransitive = item[3]

        if (shouldResolve) {
            modRuntimeOnly("${dependencyNotation}:${project.property("${propertyPrefix}_version")}") {
                transitive(shouldTransitive)
            }
        }
    }

    runtimeOnly(project(path: ":fabricWrapper"))
}

archivesBaseName("${project.mod_archives_base_name}-${project.minecraft_version}")
group(project.mod_maven_group)
sourceCompatibility(JavaVersion.VERSION_1_8)
targetCompatibility(JavaVersion.VERSION_1_8)
version(project.parent.version)

loom {
    interfaceInjection {
        enableDependencyInterfaceInjection.set(true)
    }

    runConfigs.configureEach {
        // Dump modified classes automatically.
        property("mixin.debug.export", "true")
    }

    runConfigs.named("client") {
        programArgs([
                "--width",
                "1920",
                "--height",
                "1080",
        ])
        runDir("run/client")
    }

    runConfigs.named("server") {
        runDir("run/server")
    }

    runs {
        mixinAuditClient {
            inherit(client)
            vmArgs("-D${project.mod_id}.mixin_audit=true")
            ideConfigGenerated(false)
            runDir("run/client")
        }

        mixinAuditServer {
            inherit(server)
            vmArgs("-D${project.mod_id}.mixin_audit=true")
            ideConfigGenerated(false)
            runDir("run/server")
        }
    }

    runMixinAuditClient {
        setGroup("${project.mod_id}")
    }

    runMixinAuditServer {
        setGroup("${project.mod_id}")
    }

    // Setup client default settings.
    runClient {
        defaultCharacterEncoding("UTF-8")

        if (!new File("${projectDir}/run/client/options.txt").exists()) {
            new File("${projectDir}/run/client").mkdirs()
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("${projectDir}/run/client/options.txt"))
            bufferedWriter.writeLine("autoJump:false")
            bufferedWriter.writeLine("enableVsync:false")
            bufferedWriter.writeLine("forceUnicodeFont:true")
            bufferedWriter.writeLine("fov:1.0")
            bufferedWriter.writeLine("gamma:16.0")
            bufferedWriter.writeLine("guiScale:3")
            bufferedWriter.writeLine("lang:${Locale.getDefault().toString()}")
            bufferedWriter.writeLine("maxFps:260")
            bufferedWriter.writeLine("renderDistance:10")
            bufferedWriter.writeLine("soundCategory_master:0.0")
            bufferedWriter.close()
        }
    }

    // Setup server default settings.
    runServer {
        defaultCharacterEncoding("UTF-8")

        // Agree eula before server init.
        if (!new File("${projectDir}/run/server/eula.txt").exists()) {
            new File("${projectDir}/run/server").mkdirs()
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("${projectDir}/run/server/eula.txt"))
            bufferedWriter.writeLine("eula=true")
            bufferedWriter.close()
        }
    }
}

tasks.findAll { it.name in [
        "runClient", "runServer",
        "runMixinAuditClient", "runMixinAuditServer",
        "preprocessCode", "preprocessResources",
        "preprocessTestCode", "preprocessTestResources"] }.forEach {
    it.group("${project.mod_id}")
}

tasks.withType(JavaCompile).configureEach {
    options.setEncoding("UTF-8")
    options.getCompilerArgs().add("-Xlint:-removal")
}

remapJar {
    remapperIsolation.set(true)
}

processResources {
    from("${rootDir}/icon.png") {
        into("assets/${project.mod_id}")
    }

    filesMatching("fabric.mod.json") {
        filter { line ->
            line.trim().startsWith("//") ? "" : line
        }

        expand([
                "minecraft_dependency": project.minecraft_dependency,
                "minecraft_version_id": project.minecraft_version.replace(".", "_"),
                "minecraft_version"   : project.minecraft_version,
                "mod_description"     : project.mod_description,
                "mod_homepage"        : project.mod_homepage,
                "mod_id"              : project.mod_id,
                "mod_license"         : project.mod_license,
                "mod_name"            : project.mod_name,
                "mod_sources"         : project.mod_sources,
                "mod_version"         : project.version
        ])
    }
}

blossom {
    replaceToken("@MOD_IDENTIFIER@"            , project.mod_id)
    replaceToken("@MOD_NAME@"                  , project.mod_name)
    replaceToken("@MINECRAFT_VERSION_IDENTIFY@", project.minecraft_version.replace(".", "_"))
}

java {
    withSourcesJar()
}

jar {
    from("${rootDir}/LICENSE")
}

publishing() {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId("${project.mod_id}-${project.minecraft_version.replace(".", "_")}")
            version("${rootProject.getMavenArtifactVersion()}")
            from(components.java)
        }
    }

    repositories {
        mavenLocal()

        maven {
            url("${rootDir}/publish")
        }
    }
}