import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

plugins {
    id("java")
    id("java-library")
    id("maven-publish")
    id("signing")
}

allprojects {
    apply(plugin: "java")
    apply(plugin: "java-library")
    apply(plugin: "maven-publish")
    apply(plugin: "signing")
}

tasks.withType(AbstractPublishToMaven).configureEach {
    enabled(false)
}

tasks.withType(Jar).configureEach {
    enabled(false)
}

tasks.withType(ProcessResources).configureEach {
    enabled(false)
}

subprojects {
    Map<String, Map<String, ?>> settings = rootProject.file("settings.json").withReader {
        new JsonSlurper().parse(it) as Map<String, Map<String, ?>>
    }

    Set<Project> submodules = new HashSet<>()
    Project coreProject = evaluationDependsOn(":magiclib-core:${project.parent.name}")

    for (String module_name : settings.get("projects").keySet()) {
        Map<String, ?> project_detail = settings.get("projects").get(module_name) as Map<String, ?>
        String prefix = project_detail.get("prefix")
        List<String> versions = project_detail.get("versions") as List<String>
        versions.findAll { it == "${project.name}-${project.parent.name}" }
                .collect { project(":${module_name}:${prefix}-${it}") }
                .forEach { submodules.add(it) }
    }

    repositories {
        mavenLocal()

        maven {
            name("Curse Maven")
            url("https://www.cursemaven.com")

            content {
                includeGroup("curse.maven")
            }
        }

        maven {
            name("Modrinth Maven")
            url("https://api.modrinth.com/maven")

            content {
                includeGroup("maven.modrinth")
            }
        }

        maven {
            name("FabricMC")
            url("https://maven.fabricmc.net")
        }

        mavenCentral()
    }

    base {
        setArchivesName("${project.parent.property("mod.archives_base_name")}-${project.name}")
        group("${project.parent.property("mod.maven_group")}")
        version(project.getModVersion(rootProject))
    }

    java {
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
        withSourcesJar()
        withJavadocJar()
    }

    jar {
        dependsOn(submodules.collect { it.tasks.remapJar })
        dependsOn(coreProject.tasks.shadowJar)

        doFirst {
            delete fileTree("build/tmp/submods/META-INF/jars")

            copy {
                from {
                    coreProject.tasks.shadowJar.outputs.files
                }

                from {
                    submodules.collect {
                        it.tasks.remapJar.outputs.files
                    }
                }

                into("build/tmp/submods/META-INF/jars")
            }
        }

        from("build/tmp/submods")
    }

    processResources {
        from(project.parent.sourceSets.main.resources.srcDirs) {
            include("fabric.mod.json")
            expand([
                    "mod_description": project.property("mod.description"),
                    "mod_homepage"   : project.property("mod.homepage"),
                    "mod_id"         : project.property("mod.id"),
                    "mod_license"    : project.property("mod.license"),
                    "mod_name"       : project.property("mod.name"),
                    "mod_sources"    : project.property("mod.sources"),
                    "mod_version"    : project.getVersionWithCommitHash(rootProject),
            ])
        }

        doLast {
            Set<String> mc_condition = []
            Set<Map<String, String>> jars = [["file": "META-INF/jars/${coreProject.parent.property("mod.archives_base_name")}-fabric-${coreProject.version}.jar"]]

            submodules.forEach {
                mc_condition.add("${it.property("dependencies.minecraft_dependency")}")
                jars.add(["file": "META-INF/jars/${it.parent.property("mod.archives_base_name")}-mc${it.property("dependencies.minecraft_version")}-${it.loom.platform.get().toString().toLowerCase()}-${it.version}.jar"])
            }

            File file = file("build/resources/main/fabric.mod.json")
            JsonSlurper slurper = new JsonSlurper()
            JsonBuilder builder = new JsonBuilder(slurper.parse(file))
            builder.content.depends.minecraft = mc_condition
            builder.content.jars = jars

            file.withWriter {
                it.append(builder.toPrettyString())
            }
        }

        from("${rootDir}/LICENSE")
        from("${rootDir}/icon.png") {
            into("assets/${project.property("mod.id")}")
        }
    }

    signing {
        String signingKey = project.getOrDefault("secrets.gpg.signingKey", project.getEnv().SIGNING_PGP_KEY)
        String signingPassword = project.getOrDefault("secrets.gpg.signingPassword", project.getEnv().SIGNING_PGP_PASSWORD)

        required {
            signingKey
        }

        useInMemoryPgpKeys(signingKey, signingPassword ? signingPassword : "")
        sign(publishing.publications)
    }

    publishing {
        publications { PublicationContainer publications ->
            register("release", MavenPublication) { MavenPublication publication ->
                artifactId("${project.parent.property("mod.artifact_name")}-${project.name}")
                from(components.java as SoftwareComponent)
                version("${this.project.getMavenArtifactVersion(rootProject)}")
                alias(false)
                this.project.addPomMetadataInformation(this.project, publication)

                pom.withXml { XmlProvider provider ->
                    Node dependencies = provider.asNode().appendNode("dependencies")
                    submodules.forEach { Project submodule ->
                        Node dependency = dependencies.appendNode("dependency")
                        dependency.appendNode("groupId", submodule.group)
                        dependency.appendNode("artifactId", "${submodule.parent.property("mod.artifact_name")}-${submodule.name.replace("${(settings.get("projects").get(submodule.parent.name) as Map<String, ?>).get("prefix")}-", "")}")
                        dependency.appendNode("version", "${this.project.getMavenArtifactVersion(submodule.parent)}")
                        dependency.appendNode("scope", "compile")
                    }
                }
            }

            register("snapshot", MavenPublication) { MavenPublication publication ->
                artifactId("${project.parent.property("mod.artifact_name")}-${project.name}")
                from(components.java as SoftwareComponent)
                version("${project.property("mod.version")}-SNAPSHOT")
                alias(true)
                project.addPomMetadataInformation(this.project, publication)

                pom.withXml { XmlProvider provider ->
                    Node dependencies = provider.asNode().appendNode("dependencies")
                    submodules.forEach { Project submodule ->
                        Node dependency = dependencies.appendNode("dependency")
                        dependency.appendNode("groupId", submodule.group)
                        dependency.appendNode("artifactId", "${submodule.parent.property("mod.artifact_name")}-${submodule.name.replace("${(settings.get("projects").get(submodule.parent.name) as Map<String, ?>).get("prefix")}-", "")}")
                        dependency.appendNode("version", "${this.project.getMavenArtifactVersion(submodule.parent)}")
                        dependency.appendNode("scope", "compile")
                    }
                }
            }
        }

        repositories { RepositoryHandler repositoryHandler ->
            mavenLocal {
                name("mavenLocal")
            }

            maven {
                name("projectLocalSnapshot")
                url("${rootDir}/publish/snapshot")
            }

            maven {
                name("projectLocalRelease")
                url("${rootDir}/publish/release")
            }

            maven {
                name("mavenCentralSnapshot")
                url("https://s01.oss.sonatype.org/content/repositories/snapshots/")

                project.credentialsMavenCentral(it)
            }

            maven {
                name("mavenCentralRelease")
                url("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

                project.credentialsMavenCentral(it)
            }
        }
    }

    // Solutions from: https://youtrack.jetbrains.com/issue/KT-46466
    TaskCollection<Sign> signingTasks = tasks.withType(Sign)
    tasks.withType(AbstractPublishToMaven).configureEach {
        dependsOn(signingTasks)
    }

    tasks.withType(PublishToMavenRepository).configureEach {
        Provider<Boolean> predicate = provider {
            repository == publishing.repositories.mavenLocal ||
                    (repository == publishing.repositories.projectLocalSnapshot && publication == publishing.publications.snapshot) ||
                    (repository == publishing.repositories.projectLocalRelease && publication == publishing.publications.release) ||
                    (repository == publishing.repositories.mavenCentralSnapshot && publication == publishing.publications.snapshot && project.isMavenCentralCredentialsExist()) ||
                    (repository == publishing.repositories.mavenCentralRelease && publication == publishing.publications.release && project.isMavenCentralCredentialsExist())
        }

        onlyIf {
            predicate.get()
        }
    }
}
