import groovy.json.JsonBuilder

plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
}

archivesBaseName("${project.mod_archives_base_name}-all")
group(project.mod_maven_group)
sourceCompatibility(JavaVersion.VERSION_1_8)
targetCompatibility(JavaVersion.VERSION_1_8)
version(project.parent.version)

def fabric_subprojects = project.parent.subprojects.findAll({
    it.name != "fabricWrapper"
})

fabric_subprojects.collect {
    evaluationDependsOn(":${it.name}")
}

jar {
    // disable cache
    outputs.upToDateWhen { false }

    dependsOn(fabric_subprojects.collect {
        it.tasks.remapJar
    })

    doFirst {
        delete fileTree("build/tmp/submods/META-INF/jars")

        copy {
            from {
                fabric_subprojects.collect {
                    it.remapJar.outputs.files
                }
            }

            into("build/tmp/submods/META-INF/jars")
        }
    }

    from("../LICENSE")
    from("build/tmp/submods")
}

processResources {
    // disable cache
    outputs.upToDateWhen { false }
    ArrayList<?> mc_condition = []
    ArrayList<?> jars = []

    fabric_subprojects.each({
        mc_condition.add("${it.minecraft_dependency}")
        jars.add(["file": "META-INF/jars/${project.mod_archives_base_name}-${it.minecraft_version}-${project.version}.jar"])
    })

    from("${rootDir}/icon.png") {
        into("assets/${project.mod_id}")
    }

    filesMatching("fabric.mod.json") {
        expand([
                "minecraft_dependency": new JsonBuilder(mc_condition),
                "mod_description"     : project.mod_description,
                "mod_homepage"        : project.mod_homepage,
                "mod_id"              : project.mod_id,
                "mod_license"         : project.mod_license,
                "mod_name"            : project.mod_name,
                "mod_version"         : project.version,
                "mod_sources"         : project.mod_sources,
                "sub_jars"            : new JsonBuilder(jars).toPrettyString(),
        ])
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options {
        source("17")
        encoding("UTF-8")
        charSet("UTF-8")
        addStringOption("Xdoclint:none", "-quiet")
    }

    include("**/api/**")
}

publishing {
    publications {
        register("snapshot", MavenPublication) {
            artifactId("${project.mod_id}")
            from(components.java)
            version("${project.mod_version}-SNAPSHOT")
            alias(true)

            project.addPomMetadataInformation(project, it)
        }

        register("release", MavenPublication) {
            artifactId("${project.mod_id}")
            from(components.java)
            version("${project.getMavenArtifactVersion()}")
            alias(false)

            project.addPomMetadataInformation(project, it)
        }
    }

    repositories {
        mavenLocal()

        maven {
            name("projectLocalSnapshot")
            url("${rootDir}/publish/snapshot")
        }

        maven {
            name("projectLocalRelease")
            url("${rootDir}/publish/release")
        }

        maven {
            name("mavenCentralSnapshot")
            url("https://s01.oss.sonatype.org/content/repositories/snapshots/")

            project.credentialsMavenCentral(it)
        }

        maven {
            name("mavenCentralRelease")
            url("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")

            project.credentialsMavenCentral(it)
        }
    }
}

signing {
    String signingKey = project.getOrDefault("secrets.gpg.signingKey", project.getENV().SIGNING_PGP_KEY)
    String signingPassword = project.getOrDefault("secrets.gpg.signingPassword", project.getENV().SIGNING_PGP_PASSWORD)

    required {
        signingKey
    }

    useInMemoryPgpKeys(signingKey, signingPassword ? signingPassword : "")
    sign(publishing.publications)
}

TaskCollection<Sign> signingTasks = tasks.withType(Sign)
tasks.withType(AbstractPublishToMaven).configureEach {
    it.dependsOn(signingTasks)
}